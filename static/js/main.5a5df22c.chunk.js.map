{"version":3,"sources":["components/Todoform.js","components/Todo.js","components/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Todoform","props","useState","input","setinput","inputref","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","value","name","onChange","target","ref","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setedit","map","todo","index","isComplete","onClick","Todolist","settodos","test","newTodos","updatedTodos","remArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA8BeA,MA5Bf,SAAkBC,GAChB,MAA2BC,mBAAS,IAApC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAWC,iBAAO,MAkBtB,OAjBFC,qBAAU,WACRF,EAASG,QAAQC,WAiBd,uBAAMC,UAAY,UAAUC,SAVZ,SAAAC,GACjBA,EAAEC,iBACDZ,EAAMU,SAAS,CACfG,GAAKC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAOf,IAEVC,EAAS,KAIP,UACI,uBAAOe,KAAK,OAAOC,YAAY,iBAAiBC,MAAOlB,EAAOmB,KAAM,OAAOZ,UAAU,UAAUa,SAfnF,SAAAX,GACjBR,EAASQ,EAAEY,OAAOH,QAc0GI,IAAKpB,IAC5H,wBAAQK,UAAU,UAAlB,0BCSIgB,MA/Bf,YAA2D,IAA5CC,EAA2C,EAA3CA,MAAMC,EAAqC,EAArCA,aAAaC,EAAwB,EAAxBA,WAAWC,EAAa,EAAbA,WACzC,EAAuB5B,mBAAS,CAC5BY,GAAK,KACLO,MAAO,KAFX,mBAAOU,EAAP,KAAYC,EAAZ,KAaJ,OAAGD,EAAKjB,GACG,cAAC,EAAD,CAAUiB,KAAMA,EAAMpB,SATX,SAAAU,GACdS,EAAWC,EAAKjB,GAAGO,GACnBW,EAAQ,CACJlB,GAAK,KACLO,MAAQ,QAQTM,EAAMM,KAAI,SAACC,EAAKC,GAAN,OACb,sBAAKzB,UAAWwB,EAAKE,WAAa,oBAAsB,WAAxD,UACE,qBAAmBC,QAAS,kBAAIT,EAAaM,EAAKpB,KAAlD,SACKoB,EAAKhB,MADAgB,EAAKpB,IAGf,sBAAKJ,UAAU,QAAf,UACA,wBAAQA,UAAU,cAAc2B,QAAW,kBAAKR,EAAWK,EAAKpB,KAAhE,kBACA,wBAAQJ,UAAU,YAAY2B,QAAW,kBAAKL,EAAQ,CAAClB,GAAKoB,EAAKpB,GAAGO,MAAQa,EAAKhB,QAAjF,4BANuEiB,OCyBlEG,MA5Cf,WACI,MAAyBpC,mBAAS,IAAlC,mBAAOyB,EAAP,KAAaY,EAAb,KAkCA,OACI,gCACI,iDACA,cAAC,EAAD,CAAU5B,SApCF,SAAAuB,GACb,GAAIA,EAAKhB,OAAQ,QAAQsB,KAAKN,EAAKhB,MAAnC,CAIA,IAAMuB,EAAQ,CAAIP,GAAJ,mBAAYP,IAE1BY,EAASE,OA8BJ,cAAC,EAAD,CAAMd,MAASA,EAAOC,aAdX,SAAAd,GAChB,IAAI4B,EAAef,EAAMM,KAAI,SAAAC,GAIzB,OAHGA,EAAKpB,KAAOA,IACXoB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO8Cb,WA1BxC,SAAAf,GACf,IAAM6B,EAAS,YAAIhB,GAAOiB,QAAO,SAAAV,GAAI,OAAEA,EAAKpB,KAAOA,KACnDyB,EAASI,IAwBsEb,WArBhE,SAACe,EAASC,GACxBA,EAAS5B,OAAQ,QAAQsB,KAAKM,EAAS5B,OAG3CqB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKlC,KAAO+B,EAASC,EAAWE,eCZxDC,MARf,WACE,OACE,qBAAKvC,UAAU,WAAf,SACC,cAAC,EAAD,OCIUwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a5df22c.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useState,useEffect,useRef} from 'react'\r\nfunction Todoform(props) {\r\n  const [input , setinput] = useState('')\r\n  const inputref = useRef(null)\r\n  useEffect(()=>{\r\n    inputref.current.focus()\r\n  })\r\n\r\n  const handlechange = e =>{\r\n      setinput(e.target.value)\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n      e.preventDefault();\r\n       props.onSubmit({\r\n       id : Math.floor(Math.random()*1000),\r\n        text : input\r\n       })\r\n     setinput('')\r\n  };\r\n\r\n    return (\r\n       <form className = 'inpform' onSubmit={handleSubmit}>\r\n           <input type='text' placeholder='Enter the todo' value={input} name ='text' className='todoinp' onChange={handlechange} ref={inputref} />\r\n           <button className=\"todobtn\">Add todo</button>\r\n       </form>\r\n    )\r\n}\r\n\r\nexport default Todoform\r\n","import React,{useState} from 'react'\r\nimport Todoform from './Todoform'\r\n\r\nfunction Todo({todos,completeTodo,removeTodo,updateTodo}) {\r\n    const [edit,setedit] = useState({\r\n        id : null,\r\n        value: ''\r\n    });\r\n    \r\n    const readUpdate =value => {\r\n        updateTodo(edit.id,value)\r\n        setedit({\r\n            id : null,\r\n            value : ''\r\n        })\r\n    }\r\n    \r\nif(edit.id){\r\n    return <Todoform edit={edit} onSubmit = {readUpdate} />;\r\n}\r\n\r\n    return todos.map((todo,index)=>(\r\n        <div className={todo.isComplete ? 'todo-row-complete' : 'todo-row'} key={index}>\r\n          <div key={todo.id} onClick={()=>completeTodo(todo.id)}>\r\n              {todo.text}\r\n          </div>\r\n          <div className=\"icons\">\r\n          <button className=\"delete-icon\" onClick = {()=> removeTodo(todo.id)}>DONE</button>\r\n          <button className=\"edit-icon\" onClick = {()=> setedit({id : todo.id,value : todo.text})}>Edit Todo</button>\r\n          </div>\r\n            </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React,{useState} from 'react'\r\nimport Todoform from './Todoform'\r\nimport Todo from './Todo'\r\nfunction Todolist() {\r\n    const [todos,settodos] = useState([])\r\n   const addtodos = todo =>{\r\n       if(!todo.text || /^\\s*$/.test(todo.text)){\r\n           return\r\n       }\r\n\r\n       const newTodos = [todo,...todos]\r\n\r\n       settodos(newTodos)\r\n\r\n   };\r\n \r\n   const removeTodo = id => {\r\n       const remArr = [...todos].filter(todo=>todo.id !== id)\r\n       settodos(remArr);\r\n   };\r\n   \r\n   const updateTodo = (todoId , newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n        return\r\n    }\r\n    settodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n   };\r\n\r\n   const completeTodo =id =>{\r\n       let updatedTodos = todos.map(todo =>{\r\n           if(todo.id === id){\r\n               todo.isComplete = !todo.isComplete\r\n           }\r\n           return todo\r\n       })\r\n       settodos(updatedTodos);\r\n   };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Tasks for today</h1>\r\n            <Todoform onSubmit={addtodos} />\r\n            <Todo todos = {todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo = {updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todolist\r\n","import React from 'react'\nimport './App.css';\n//import Todoform from './components/Todoform';\nimport Todolist from './components/Todolist';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n     <Todolist />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}